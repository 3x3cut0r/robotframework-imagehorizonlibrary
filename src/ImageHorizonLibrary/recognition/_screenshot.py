"""Screenshot helper functionality for ImageHorizonLibrary."""
# -*- coding: utf-8 -*-
from os.path import abspath, relpath, join as path_join

import pyautogui as ag
from robot.libraries.BuiltIn import BuiltIn, RobotNotRunningError
from robot.api import logger as LOGGER

from ..errors import ScreenshotFolderException


class _Screenshot(object):
    """Mixin providing screenshot keywords."""

    def _make_up_filename(self):
        """Generate a unique screenshot file name based on suite name.

        Returns
        -------
        str
            A filename composed of the current suite name (or a default prefix)
            and a running counter, suffixed with ``.png``.
        """
        try:
            path = BuiltIn().get_variable_value("${SUITE NAME}")
            path = "%s-screenshot" % path.replace(" ", "")
        except RobotNotRunningError:
            LOGGER.info(
                "Could not get suite name, using default naming scheme"
            )
            path = "ImageHorizon-screenshot"
        path = "%s-%d.png" % (path, self.screenshot_counter)
        self.screenshot_counter += 1
        return path

    def take_a_screenshot(self):
        """Capture and save a screenshot of the current screen.

        Screenshots are stored either in ``screenshot_folder`` (if configured
        during library import) or in the current working directory. The file
        name is generated by :py:meth:`_make_up_filename`.

        Returns
        -------
        str
            Absolute path to the saved screenshot file.
        """
        target_dir = self.screenshot_folder if self.screenshot_folder else ""
        if not isinstance(target_dir, str):
            raise ScreenshotFolderException(
                "Screenshot folder is invalid: " '"%s"' % target_dir
            )
        path = self._make_up_filename()
        path = abspath(path_join(target_dir, path))
        try:
            logpath = BuiltIn().get_variable_value("${OUTPUT DIR}")
            relativepath = relpath(path, start=logpath).replace("\\", "/")
        except RobotNotRunningError:
            relativepath = path
        LOGGER.info(
            'Screenshot taken: {0}<br/><img src="{0}" '
            'width="100%" />'.format(relativepath),
            html=True,
        )
        ag.screenshot(path)
        return path
